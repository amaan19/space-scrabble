!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i,o=function(){this.update=function(t,e){var n,i,o;for(n=e.length-1;n>=0;n--)i=e[n],o=r.vectorScalarMultiply(i.direction,i.speed),i.position=r.vectorAdd(i.position,r.vectorScalarMultiply(o,t))}},r=function(){function t(t,e){this.x=t,this.y=e}return t.vectorAdd=function(e,n){return new t(e.x+n.x,e.y+n.y)},t.vectorSubtract=function(e,n){return new t(e.x-n.x,e.y-n.y)},t.vectorScalarMultiply=function(e,n){return new t(e.x*n,e.y*n)},t.vectorLength=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},t.vectorNormalise=function(e){var n=1/(t.vectorLength(e)+1e-37);return t.vectorScalarMultiply(e,n)},t}(),c=function(){function t(t,e,n,i){var o=this;this.left=function(){return o.x},this.right=function(){return o.x+o.width},this.top=function(){return o.y},this.bottom=function(){return o.y+o.height},this.intersects=function(t){return o.right()>=t.left()&&o.left()<=t.right()&&o.top()<=t.bottom()&&o.bottom()>=t.top()},this.x=t,this.y=e,this.width=n,this.height=i}return t.rectUnion=function(e,n){return void 0===e?n:void 0===n?e:new t(Math.min(e.x,n.x),Math.min(e.y,n.y),Math.max(e.right(),n.right())-Math.min(e.left(),n.left()),Math.max(e.bottom(),n.bottom())-Math.min(e.top(),n.top()))},t}(),u=new c(0,0,300,180),s=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(t){function e(e,n,i){var o=t.call(this,e,n,i)||this;return o.update=function(e){t.prototype.update.call(o,e),(o.collisionRect().top()<=0||o.collisionRect().bottom()>=u.bottom())&&(o.direction.y*=-1)},o.width=20,o.height=10,o}return s(e,t),e}(p),h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),f=function(t){function e(e,n,i,o){var r=t.call(this,e,n,i)||this;return r.update=function(e){t.prototype.update.call(r,e),(r.collisionRect().top()<=0||r.collisionRect().bottom()>=u.bottom())&&(r.direction.y*=-1)},r.width=13,r.height=10,r.rank=o,r}return h(e,t),e}(p),l=function(){var t=this;this.enemyColors=["rgb(150, 7, 7)","rgb(150, 89, 7)","rgb(56, 150, 7)","rgb(7, 150, 122)","rgb(46, 7, 150)"],this.drawRectangle=function(e,n){t.context.fillStyle=e,t.context.fillRect(n.position.x-n.width/2,n.position.y-n.height/2,n.width,n.height)},this.render=function(e,n){var i,o;for(t.context.fillStyle="black",t.context.fillRect(0,0,t.width,t.height),i=0;i<n.length;i++)(o=n[i])instanceof f?t.drawRectangle(t.enemyColors[o.rank],o):o instanceof a&&t.drawRectangle("rgb(255, 255, 0)",o)},this.canvas=document.querySelector("#game-layer"),this.context=this.canvas.getContext("2d"),this.width=this.canvas.width,this.height=this.canvas.height},d=function(){var t=this;this.started=!1,this.start=function(){t.entities=[],t.enemies=[],t.physics=new o,t.renderer=new l,t.addEntity(new a(new r(100,175),25,new r(0,-1))),t.addEntity(new f(new r(20,25),20,new r(0,1),0)),t.addEntity(new f(new r(50,25),10,new r(0,1),1)),t.addEntity(new f(new r(80,25),15,new r(0,1),2)),t.addEntity(new f(new r(120,25),25,new r(0,1),3)),t.addEntity(new f(new r(140,25),30,new r(0,1),4)),t.started||(window.requestAnimationFrame(t.update),t.started=!0)},this.addEntity=function(e){t.entities.push(e),e instanceof a&&(t.player=e),e instanceof f&&t.enemies.push(e)},this.removeEntities=function(){if(t.entities){var e=function(e){return!t.entities.includes(e)};t.entities=t.entities.filter(e),t.enemies=t.enemies.filter(e),t.entities.includes(t.player)&&(t.player=void 0)}},this.update=function(){var e;for(t.physics.update(1/60,t.entities),e=t.entities.length-1;e>=0;e--)t.entities[e].update(1/60);t.renderer.render(1/60,t.entities),window.requestAnimationFrame(t.update)}},p=function(){function t(t,e,n){var i=this;this.collisionRect=function(){return new c(i.position.x-i.width/2,i.position.y-i.height/2,i.width,i.height)},this.position=t,this.speed=e,this.direction=n,this.time=0,this.width=5,this.height=5,this.hp=1}return t.prototype.update=function(t){this.time+=t},t}();(new d).start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,